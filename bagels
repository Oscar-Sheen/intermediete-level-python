"""Bagels is a deductive logic game. The user aims to guess a secret 
three-digit number. Hints include the words "Pico" for a correct digit
in the wrong place, "Fermi" for a correct digit in the correct place,
and "Bagels" for none of the guesses digits are in the secret number. 
The user has a maximum amount of guesses per game with the option to
play again or quit the program."""

import random

NUM_DIGITS = 3
MAX_GUESSES = 10

def main():
    print(f"""
I am thinking of a {NUM_DIGITS}-digit number with no repeated digits.
Try to guess what the number is. Here are some clues:

When I say:             That means:
    Pico                One digit is correct but in the wrong position.
    Fermi:              One digit is correct and in the right position.
    Bagels:             No digit is correct.

For example, if the secret number was 248 and your guess was 843, the
clues would be Fermi Pico.""")

    while True: # Main game loop.
        # This stores the secret number the player needs to guess:
        secretNum = getSecretNum()
        print("I have thought up a number.")
        print(f"You have {MAX_GUESSES} guesses to get it.")

        numGuesses = 1
        while numGuesses <= MAX_GUESSES:
            guess = ""
            # Keep looping until they enter a valid guess:
            while len(guess) != NUM_DIGITS or not guess.isdecimal():
                print(f"Guess #{numGuesses}: ")
                guess = input("> ")

            clues = getClues(guess, secretNum)
            print(clues)
            numGuesses += 1

            if guess == secretNum:
                break # They're correct so break out of the loop.
            if numGuesses > MAX_GUESSES:
                print("You ran out of guesses.")
                print(f"The answer was {secretNum}.")

        # Ask player if they want to play again.
        print("Do you want to play again? (yes or no)")
        if not input("> ").lower().startswith("y"):
            break
    print("Thanks for playing!")


def getSecretNum():
    """Returns a string made up of NUM-DIGITS unique random digits."""
    numbers = list('0123456789') # Create a list of digits 0 to 9.
    random.shuffle(numbers) # Shuffle them into a random order.

    # Get the first NUM_DIGITS digits in the list for the secret number:
    secretNum = ""
    for digit in range(NUM_DIGITS):
        secretNum += str(numbers[digit])
    return secretNum


def getClues(guess, secretNum):
    """Returns a string with the pico, fermi, bagels clues for a guess
    and secret number pair."""
    if guess == secretNum:
        return "You got it!"

    clues = []

    for i in range(len(guess)):
        if guess[i] == secretNum[i]:
            # A correct digit is in the correct place.
            clues.append("Fermi")
        elif guess[i] in secretNum:
            # A correct digit is in the incorrect place.
            clues.append("Pico")
            
    if len(clues) == 0:
        return "Bagels" # There are no correct digits at all.
    else:
        # Sort the clues into alphabetical order so their original order
        # doesn't give information away. Necessary otherwise the order
        # in which pico et al is printed will be known (too easy?)
        clues.sort()
        # Make a single string from the list of string clues.
        return " ".join(clues)


# If the program is run (instead of imported), run the game:
if __name__ == '__main__':
    main()
